/*********************************************************************
 * Choice class.
 * this class deals with one candidate name and contest of cast votes
 *
 * @author Patrick Hamod
 * @version 1.00 2013-02-04
**/
public class Choice implements IChoice{
	
	private String candidateName= null;
	private String contest = null;
	private int count =1;
	
	public Choice(String candidate, String contest)
	{
		this.candidateName = candidate;
		this.contest = contest;
	}
	
	public Choice(String s)
	  {
	    this.count = 0;
	    this.candidateName = s.substring(2,42).trim();
	    this.contest = s.substring(42).trim();
	  } // public Choice(String s)

	/*********************************************************************
	 * Accessors and mutators.
	**/

	/*********************************************************************
	 * Accessor method to get the candidate name.
	 *
	 * @return the candidate
	**/
	  public String getCandidateName()
	{
		return candidateName;
	}

	/*********************************************************************
	 * Accessor method to get the contest name.
	 *
	 * @return the contest
	**/
	  public String getContest()
	  {
		return contest;  
	  }
	/*********************************************************************
	 * Accessor method to get the count;
	 *
	 * @return the count
	**/
	  public int getCount()
	  {
		return count;  
	  }

	/*********************************************************************
	 * General methods.
	**/

	/*********************************************************************
	 * Method to compare two choices.
	 *
	 * We choose to compare first on contest, then on candidate name.
	 *
	 * @return the usual -1, 0, +1 of a comparison
	**/
	  public int compareTo(Choice that)
	  {
		  int returnVal;
		if(contest.equals(that.getContest()))  
		{
			returnVal = candidateName.compareTo(that.getCandidateName());
		}
		else
		{
			returnVal= -1;
		}
		
		return returnVal;
	  }

	/*********************************************************************
	 * Method to test two elements for equality.
	 *
	 * @return the boolean answer
	**/
	  public boolean equals(Choice that)
	  {
		  boolean isEqual;
		  if(compareTo(that)==0)
		  {
			  isEqual =true;
		  }
		  else
		  {
			  isEqual =false;
		  }
		  return isEqual;
	  }

	/*********************************************************************
	 * Method to increment the count;
	**/
	  public void increment()
	  {
		count++;
	  }

	/*********************************************************************
	 * Usual 'toString' method. returns the candidate and votes for them
	 *
	 * @return a formatted 'toString' of the class
	**/
	  public String toString()
	  {
		String b = String.format("%6S", candidateName);
		String c = String.format("%6S", count);
		String output = c+b +"\n";
		return output;
	  }
	  
}
